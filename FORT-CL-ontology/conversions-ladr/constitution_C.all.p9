formulas(sos).
(all x all y  (constitutes(x,y) -> GCD(PSI(x),PHI(y)))).
(all x all y  (constitutes(x,y) -> (all z  (part(z,x) -> elementOf(z,x))))).
(all x all y  (SCD(x,y) -> SED(x,y))).
(all x all y  (GCD(PSI(x),PHI(y)) -> GED(PSI(x),PHI(y)))).
(all x all y all z  ((SCD(x,y) & SCD(y,z)) -> SCD(x,z))).
(all x all y all z  ((GCD(PSI(x),PHI(y)) & GCD(PHI(y),RHO(z)) & -(exists z  (PSI(z) & RHO(z)))) -> GCD(PSI(x),RHO(z)))).
(all x all y  (SCD(x,y) <-> ((exists t  existing(x,t)) & (all t  (existing(x,t) -> constitutes(y,x)))))).
(all x all y  (GCD(PSI(x),PHI(y)) <-> (-(exists z  (PSI(z) & PHI(z))) & (all x  (PSI(x) -> (exists t  existing(x,t)))) & (all x all t  ((PSI(x) & existing(x,t)) -> (exists y  (PHI(y) & constitutes(y,x)))))))).
(all x all y  (SED(x,y) <-> ((all t  (existing(x,t) -> existing(y,t))) & -(=(x,y)) & (exists t  existing(x,t))))).
(all x all y  (GED(PSI(x),PHI(y)) <-> ((all x all t  ((PSI(x) & existing(x,t)) -> (exists y  (PHI(y) & existing(y,t))))) & (exists x exists t  (PSI(x) & existing(x,t))) & -(exists z  (PSI(z) & PHI(z)))))).
(all x all t  (existing(x,t) -> -(existing(t,x)))).
(all x  -(constitutes(x,x))).
(all x all y  (constitutes(x,y) -> -(constitutes(y,x)))).
(all x all y all z  ((constitutes(x,y) & constitutes(y,z)) -> constitutes(x,z))).
(all x all y  (constitutes(x,y) -> (exists t  (existing(x,t) & existing(y,t))))).
(all x all y  ((constitutes(x,y) & part('z',y)) -> (exists w  (part(w,x) & constitutes(w,'z'))))).
(all x  part(x,x)).
(all x all y  ((part(x,y) & part(y,x)) -> =(x,y))).
(all x all y all z  ((part(x,y) & part(y,z)) -> part(x,z))).
(all x all y  (elementOf(x,y) <-> (part(x,y) & SED(y,x)))).
(all x all y  (elementOf(x,y) -> ppart(x,y))).
(all x all y  (-(part(x,y)) -> (exists z  (part(z,x) & -(overlaps(z,y)))))).
(all x all y  (overlaps(x,y) <-> (exists z  (part(z,x) & part(z,y))))).
(all x all y  (overlaps(x,y) -> (exists z  (all v  (part(v,z) <-> (part(v,x) & part(v,y))))))).
(all x all y  (underlaps(x,y) -> (exists z  (all v  (overlaps(v,z) <-> (overlaps(v,x) | overlaps(v,y))))))).
(all x all y  (underlaps(x,y) <-> (exists z  (part(x,z) & part(y,z))))).
end_of_list.
